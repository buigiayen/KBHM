using BloodBank.api.interfaces;
using BloodBank.api.Model;
using Microsoft.Identity.Client;
using Newtonsoft.Json.Serialization;
using Newtonsoft.Json;
using Services.lib.BloodBank;
using Services.lib.Http;
using Services.lib.Sql;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using static BloodBank.api.Model.Donnor;
using static Dapper.SqlMapper;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;
using static System.Net.Mime.MediaTypeNames;
using System.Linq;
using Microsoft.Data.SqlClient;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;
using System.Security.Cryptography;

namespace BloodBank.api.command
{
    public class SyncPatient : ISyncDonnor
    {
        private Dataprovider Dataprovider;
        private ConnectionSQL _connectionSQL;
        public SyncPatient(Dataprovider dataprovider, ConnectionSQL connectionSQL)
        {
            Dataprovider = dataprovider;
            _connectionSQL = connectionSQL;
        }
        private async Task<HttpObject.APIMapper<SequenceNumInfo>> GetNextSequence()
        {

            string sql = "Select SequenceId, StartNum, EndNum, CurrentVal, Mode, UpdateTime, getdate() as ServerTime " +
                "from dbo.SequenceConfig  where SequenceId=@SequenceId ";
            var sequenceNum = await Dataprovider.QueryMapperSingleOrDefaultAsync<SequenceNumInfo>(sql, new { SequenceId = SequenceNumInfo.SequenceIDIdentityID });
            if (sequenceNum != null)
            {
                long nextVal = sequenceNum.CurrentVal + 1;
                if (nextVal > sequenceNum.EndNum)
                {
                    //result.CurrentVal = result.StartNum;
                    nextVal = sequenceNum.StartNum;
                }
                else
                {
                    switch (sequenceNum.ResetMode)
                    {
                        case SequenceResetMode.ByYear:
                            if (sequenceNum.ServerTime.Year != sequenceNum.LastUpdate.Year)
                            {
                                sequenceNum.CurrentVal = sequenceNum.StartNum;
                                nextVal = sequenceNum.CurrentVal + 1;
                            }
                            break;
                        case SequenceResetMode.ByMonth:
                            if (sequenceNum.ServerTime.Year != sequenceNum.LastUpdate.Year ||
                                sequenceNum.ServerTime.Month != sequenceNum.LastUpdate.Month)
                            {
                                sequenceNum.CurrentVal = sequenceNum.StartNum;
                                nextVal = sequenceNum.CurrentVal + 1;
                            }
                            break;
                        case SequenceResetMode.ByDay:
                            if (sequenceNum.ServerTime.Year != sequenceNum.LastUpdate.Year ||
                                sequenceNum.ServerTime.Month != sequenceNum.LastUpdate.Month ||
                                sequenceNum.ServerTime.Date != sequenceNum.LastUpdate.Date)
                            {
                                sequenceNum.CurrentVal = sequenceNum.StartNum;
                                nextVal = sequenceNum.CurrentVal + 1;
                            }
                            break;
                    }
                }
                string SQL = "update dbo.SequenceConfig  set CurrentVal = @CurrentVal, UpdateTime = getdate()  where SequenceId=@SequenceId";
                await Dataprovider.QueryMapperSingleOrDefaultAsync<SequenceNumInfo>(SQL, new { CurrentVal = nextVal, SequenceId = SequenceNumInfo.SequenceIDIdentityID });

            }
            var data = new HttpObject.APIMapper<SequenceNumInfo>();
            data.code = sequenceNum != null ? HttpObject.Enums.Httpstatuscode_API.OK : HttpObject.Enums.Httpstatuscode_API.ERROR;
            data.Data = sequenceNum;
            data.Messenger = "";
            return data;
        }
        private async Task<int?> GetDonorIdByIdentityID(string identityID)
        {
            int? result = null;
            string sql = "SELECT TOP 1 D.DonorID FROM tbl_Donor D WHERE D.IdentityID = @IdentityID";
            var data = await _connectionSQL.SingleOrDefaultAsync("SQL_CONNECTION_REGION1", sql, new { IdentityID = identityID });
            if (data.code == HttpObject.Enums.Httpstatuscode_API.OK && data.Data != null)
            {
                result = data.Data.DonorID;
            }
            return result;
        }


        private async Task<string> GetAutoGeneratedIdentityID()
        {
            int? foundDonorId = null;
            string identityID = string.Empty;
            int loopTime = 0;
            do
            {
                DateTime currentDate = DateTime.Now;
                var sequenceNum = GetNextSequence();
                identityID = string.Format("{0:yyMM}{1:0000}", currentDate, sequenceNum.Result.Data.CurrentVal);
                foundDonorId = await GetDonorIdByIdentityID(identityID);
                loopTime++;
                if (loopTime > sequenceNum.Result.Data.EndNum - sequenceNum.Result.Data.StartNum)
                {
                    throw new Exception("Không cấp được SID, SID trong ngày đã đầy !!!");
                }
            } while (foundDonorId != null);

            return identityID;
        }

        private async Task<int?> GetDonorIdByDonorIdentity(string identityID)
        {
            int? result = null;
            string sql = "SELECT TOP 1 D.DonorID FROM tbl_Donor D WHERE D.DonorIdentity = @IdentityID";
            var data = await Dataprovider.SingleOrDefaultAsync(sql, new { IdentityID = identityID });
            if (data.code == HttpObject.Enums.Httpstatuscode_API.OK && data.Data != null)
            {
                result = data.Data.DonorID;
            }
            return result;
        }


        private async Task<string> GetAutoGeneratedDonorIdentity()
        {
            int? foundDonorId = null;
            string identityID = string.Empty;
            int loopTime = 0;
            do
            {
                DateTime currentDate = DateTime.Now;
                var sequenceNum = await GetNextSequence();
                identityID = string.Format("{0:yyMM}{1:0000}", currentDate, sequenceNum.Data.CurrentVal);
                foundDonorId = await GetDonorIdByDonorIdentity(identityID);
                loopTime++;
                if (loopTime > sequenceNum.Data.EndNum - sequenceNum.Data.StartNum)
                {
                    throw new Exception("Không cấp được SID, SID trong ngày đã đầy !!!");
                }
            } while (foundDonorId != null);

            return identityID;
        }

        public async Task<int?> GetLeverDelay(string DonorID)
        {
            int? result = null;

            string sql = " SELECT COUNT(*) AS total " +
                            " FROM( " +
                                " SELECT DonorID FROM tbl_Blood_Donation_Delay d where d.DonorID = @DonorID " +
                                " UNION ALL " +
                                " SELECT DonorID FROM tbl_Blood_Donation_Delay_Del d where d.DonorID = @DonorID " +
                            " ) AS CombinedTables; ";
            var data = await Dataprovider.SingleOrDefaultAsync(sql, new { DonorID = DonorID });
            if (data.code == HttpObject.Enums.Httpstatuscode_API.OK && data.Data != null)
            {
                result = data.Data.total;
            }
            return result;
        }

        public async Task<int?> GetDonateID(string DonateQuickCode)
        {
            int? result = null;

            string sql = "select DonationID " +
                    " from tbl_DonateLocation d " +
                    " where d.DonationLocationQuickCode = @DonateQuickCode ";
            var data = await Dataprovider.SingleOrDefaultAsync(sql, new { DonateQuickCode = DonateQuickCode });
            if (data.code == HttpObject.Enums.Httpstatuscode_API.OK && data.Data != null)
            {
                result = data.Data.DonationID;
            }
            return result;
        }

        public async Task<Services.lib.Sql.HttpObject.APIresult> SyncDonnorEx(Donnor.tbl_Donor donnor)
        {
            if (!string.IsNullOrEmpty(donnor.DonorNameUnsign))
            {
                donnor.DonorNameUnsign = await SetNameUnsign(donnor.DonorNameUnsign);
            }
            donnor.SID = string.Format("{0}-{1}", donnor.DateGet.ToString("ddMMyy"), donnor.DonorExCode);
            donnor.Sex = Common.ConvertSex(donnor.Sex);
            donnor.DonorIdentity = await GetAutoGeneratedDonorIdentity();

            if (!string.IsNullOrEmpty(donnor.BloodSourceLocationId))
            {
                donnor.DonateID = await GetDonateID(donnor.BloodSourceLocationId);
            }

            string rowguid = "declare @ID nvarchar(100); set @ID = (select NEWID());";
            string Insert_tbl_Donor_Examine_Attribute = string.Empty;
            string Update_tbl_Donor_Examine_Attribute = string.Empty;
            string[,] tbl_Donor_Examine_Attribute = new string[,]
            {
                 {"BLOODPRESSURE" ,donnor.BLOODPRESSURE },
                 {"HGB",donnor.HGB},
                 {"PULSE",donnor.PULSE },
                 {"STATUS", donnor.STATUS},
                 {"WEIGH",donnor.WEIGH?.ToString()},
                 {"HEIGH",donnor.HEIGH?.ToString()}
            };
            for (int i = 0; i < tbl_Donor_Examine_Attribute.Length / tbl_Donor_Examine_Attribute.Rank; i++)
            {
                Insert_tbl_Donor_Examine_Attribute += "insert tbl_Donor_Examine_Attribute (DonorExID,ExamineAttributeId ,Value) values " +
                  $"(@DonorIDEx_Insert, N'{tbl_Donor_Examine_Attribute[i, 0]}', N'{tbl_Donor_Examine_Attribute[i, 1]}' );";
                Update_tbl_Donor_Examine_Attribute += $"update tbl_Donor_Examine_Attribute set Value = N'{tbl_Donor_Examine_Attribute[i, 1]}' where DonorExID=@DonorIDEx_Update and ExamineAttributeId = N'{tbl_Donor_Examine_Attribute[i, 0]}' ; ";
            }

            string ActionDonnor = @$"BEGIN

										--- Xử lý ở Donnor
                                       IF NOT EXISTS (SELECT * FROM tbl_Donor D  WHERE (D.DonorIdentity =@DonorIdentity or D.DonorCode = @DonorCode))
                                                       BEGIN
                                         Print('Insert Patient')
                                        insert into tbl_Donor (DateIn,DonorCode, sex,  Age , CCCD,Address,DonorName,DonorNameUnsign,Phone,BirthDay, TypeOf,DonorIdentity, rowguid , JobID, ContactAddress, ABO, Rh ) values(CAST(GETDATE() AS DATE),@DonorCode,@Sex,@Age,@CCCD,@Address,@DonorName,@DonorNameUnsign,@Phone,@BirthDay,1,@DonorIdentity,@ID,@JobID,@ContactAddress,@ABO,@Rh );
                                         END
                                       ELSE
                                        BEGIN
                                        Print('Update Patient')
                                        update tbl_Donor set DonorCode=@DonorCode, sex=@Sex, Age=@Age, CCCD=@CCCD, Address=@Address,DonorName=@DonorName,DonorNameUnsign=@DonorNameUnsign,Phone=@Phone, BirthDay=@BirthDay, JobID=@JobID, ContactAddress=@ContactAddress, ABO=@ABO, Rh=@Rh  where  (DonorIdentity=@DonorIdentity   or DonorCode=@DonorCode);   
                                      end


									  --- Xử lý ở Donnor_ex
									   IF NOT EXISTS (SELECT * FROM tbl_Donor D join tbl_Donor_Examine E on D.DonorID = E.DonorID  WHERE (D.DonorIdentity =@DonorIdentity or D.DonorCode = @DonorCode) and E.DonorExCode = @DonorExCode )
                                                       BEGIN
                                         Print('Insert Donnor_ex')
											declare @DonorID_Insert int; set @DonorID_Insert =  (select Top(1)  DonorID from tbl_Donor where DonorCode=@DonorCode);
											insert tbl_Donor_Examine (DonorExCode, DonorID,BloodSourceLocationId,DonateID,BloodVolume,ElementID, DateIn, SID, Weigh,Heigh,Pulse,BloodPressure,DoctorID,Examination,ABO,Rh,TestHb,TestHBsAG,Valid,ValidTime,UserValid,TripID,ExtractTimeStart,ExtractTimeEnd,SourceID) values (@DonorExCode, @DonorID_Insert ,@BloodSourceLocationId,@DonateID,@BloodVolume,@ElementID,@DateIn, @SID, @WEIGH,@HEIGH,@PULSE,@BLOODPRESSURE,@DoctorID,@STATUS,@ABO,@Rh,@HST,@HBV,1,GetDate(),@UserSync,@TripID,@ExtractTimeStart,@ExtractTimeEnd,@SourceID);
											declare @DonorIDEx_Insert int; set @DonorIDEx_Insert =  (select Top(1)  DonorExID from tbl_Donor_Examine where DonorExCode=@DonorExCode);
										{Insert_tbl_Donor_Examine_Attribute}
										 END
                                       ELSE
                                        BEGIN
                                        Print('Update Donnor_ex')
										declare @DonorID_Update int; set @DonorID_Update =  (select Top(1)  DonorID from tbl_Donor where  DonorCode=@DonorCode);
                                        update tbl_Donor_Examine set  DonorExCode=@DonorExCode,BloodSourceLocationId=@BloodSourceLocationId,DonateID=@DonateID,BloodVolume=@BloodVolume,ElementID=@ElementID,Weigh=@Weigh,Heigh=@Heigh,Pulse=@Pulse,BloodPressure=@BloodPressure,DoctorID=@DoctorID,Examination=@STATUS,ABO=@ABO,Rh=@Rh,TestHb=@HST,TestHBsAG=@HBV,TripID=@TripID,ExtractTimeStart=@ExtractTimeStart,ExtractTimeEnd=@ExtractTimeEnd,SourceID=@SourceID where DonorID=@DonorID_Update and DateIn=@DateIn
                                      	declare @DonorIDEx_Update int; set @DonorIDEx_Update =  (select Top(1)  DonorExID from tbl_Donor_Examine where DonorExCode=@DonorExCode);
										{Update_tbl_Donor_Examine_Attribute}
									  end



                                    END";


            string ActionDonnor_Old = @$"BEGIN

										--- Xử lý ở Donnor
                                       IF NOT EXISTS (SELECT * FROM tbl_Donor D  WHERE (D.IdentityID =@DonorIdentity or D.DonorCode = @DonorCode))
                                                       BEGIN
                                         Print('Insert Patient')
                                        insert into tbl_Donor (DateIn,DonorCode, sex,  Age , CCCD,Address,DonorName,DonorNameUnsign,Phone,BirthDay, TypeOf,IdentityID, rowguid , JobID, ContactAddress, ABO, Rh ) values(CAST(GETDATE() AS DATE),@DonorCode,@Sex,@Age,@CCCD,@Address,@DonorName,@DonorNameUnsign,@Phone,@BirthDay,1,@DonorIdentity,@ID,@JobID,@ContactAddress,@ABO,@Rh );
                                         END
                                       ELSE
                                        BEGIN
                                        Print('Update Patient')
                                        update tbl_Donor set DonorCode=@DonorCode, sex=@Sex, Age=@Age, CCCD=@CCCD, Address=@Address,DonorName=@DonorName,DonorNameUnsign=@DonorNameUnsign,Phone=@Phone, BirthDay=@BirthDay, JobID=@JobID, ContactAddress=@ContactAddress, ABO=@ABO, Rh=@Rh  where  (IdentityID=@DonorIdentity   or DonorCode=@DonorCode);   
                                      end


									  --- Xử lý ở Donnor_ex
									   IF NOT EXISTS (SELECT * FROM tbl_Donor D join tbl_Donor_Examine E on D.DonorID = E.DonorID  WHERE (D.IdentityID =@DonorIdentity or D.DonorCode = @DonorCode) and E.DonorExCode = @DonorExCode )
                                                       BEGIN
                                         Print('Insert Donnor_ex')
											declare @DonorID_Insert int; set @DonorID_Insert =  (select Top(1)  DonorID from tbl_Donor where DonorCode=@DonorCode);
											insert tbl_Donor_Examine (DonorExCode, DonorID,BloodSourceLocationId,DonateID,BloodVolume,ElementID, DateIn, SID, Weigh,Heigh,Pulse,BloodPressure,DoctorID,Examination,ABO,Rh,TestHb,TestHBsAG,Valid,ValidTime,UserValid,TripID,SourceID) values (@DonorExCode, @DonorID_Insert ,@BloodSourceLocationId,@DonateID,@BloodVolume,@ElementID,@DateIn, @SID, @WEIGH,@HEIGH,@PULSE,@BLOODPRESSURE,@DoctorID,@STATUS,@ABO,@Rh,@HST,@HBV,1,GetDate(),@UserSync,@TripID,@SourceID);
											declare @DonorIDEx_Insert int; set @DonorIDEx_Insert =  (select Top(1)  DonorExID from tbl_Donor_Examine where DonorExCode=@DonorExCode);
											{Insert_tbl_Donor_Examine_Attribute}
										 END
                                       ELSE
                                        BEGIN
                                        Print('Update Donnor_ex')
										declare @DonorID_Update int; set @DonorID_Update =  (select Top(1)  DonorID from tbl_Donor where  DonorCode=@DonorCode);
                                        update tbl_Donor_Examine set  DonorExCode=@DonorExCode,BloodSourceLocationId=@BloodSourceLocationId,DonateID=@DonateID,BloodVolume=@BloodVolume,ElementID=@ElementID,Weigh=@Weigh,Heigh=@Heigh,Pulse=@Pulse,BloodPressure=@BloodPressure,DoctorID=@DoctorID,Examination=@STATUS,ABO=@ABO,Rh=@Rh,TestHb=@HST,TestHBsAG=@HBV,TripID=@TripID,SourceID=@SourceID  where DonorID=@DonorID_Update 
                                      	declare @DonorIDEx_Update int; set @DonorIDEx_Update =  (select Top(1)  DonorExID from tbl_Donor_Examine where DonorExCode=@DonorExCode);
										{Update_tbl_Donor_Examine_Attribute}
									  end



                                    END";
            string Query = rowguid + Environment.NewLine + ActionDonnor;
            string Query_Old = rowguid + Environment.NewLine + ActionDonnor_Old;
            await _connectionSQL.ExcuteQueryAsync("SQL_CONNECTION_REGION1", Query_Old, donnor);
            var response = await Dataprovider.ExcuteQueryAsync(Query, donnor);
            //if (response.code == HttpObject.Enums.Httpstatuscode_API.OK)
            //{
            //    var testcodes = await GetTestCode();
            //    var profiles = await GetListProfile();
            //    var datahc = await GetDataHanhChinh();
            //    await SendTestBB(donnor.SID, testcodes, donnor.UserID);
            //    await SendTestLis(donnor.SID, donnor.DonorExCode, datahc.ObjectID, datahc.LocationID, testcodes, profiles, donnor.UserID);
            //}
            return response;
        }
        public async Task<string> SetNameUnsign(string Name)
        {
            string[] arr1 = new string[] { "á", "à", "ả", "ã", "ạ", "â", "ấ", "ầ", "ẩ", "ẫ", "ậ", "ă", "ắ", "ằ", "ẳ", "ẵ", "ặ",
                                            "đ",
                                            "é","è","ẻ","ẽ","ẹ","ê","ế","ề","ể","ễ","ệ",
                                            "í","ì","ỉ","ĩ","ị",
                                            "ó","ò","ỏ","õ","ọ","ô","ố","ồ","ổ","ỗ","ộ","ơ","ớ","ờ","ở","ỡ","ợ",
                                            "ú","ù","ủ","ũ","ụ","ư","ứ","ừ","ử","ữ","ự",
                                            "ý","ỳ","ỷ","ỹ","ỵ",};
            string[] arr2 = new string[] { "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
                                            "d",
                                            "e","e","e","e","e","e","e","e","e","e","e",
                                            "i","i","i","i","i",
                                            "o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o",
                                            "u","u","u","u","u","u","u","u","u","u","u",
                                            "y","y","y","y","y",};
            for (int i = 0; i < arr1.Length; i++)
            {
                Name = Name.Replace(arr1[i], arr2[i]);
                Name = Name.Replace(arr1[i].ToUpper(), arr2[i].ToUpper());
            }
            return Name;
        }
        public async Task<HttpObject.APIMapper<dynamic>> CheckDonnorEx(string DonorExCode)
        {
            string SQL = "SELECT cast((case when   count(DonorExCode)  = 1 then 0 else 1 end )  as bit) as CheckDonnor FROM  tbl_Donor_Examine  WHERE (DonorExCode = @DonorExCode)";
            return await Dataprovider.SingleOrDefaultAsync(SQL, new { DonorExCode = DonorExCode });
        }

        public async Task<HttpObjectData.APIresult> HistoryDonnorAsync(string IdentityID)
        {
            HttpObjectData.APIresult aPIresult = new HttpObjectData.APIresult();
            List<HistoryDonnor> historyDonnor = new List<HistoryDonnor>();

            string Donnor = $@"SELECT top(1) tgd.KetLuan, de.DateIn, SID
                                FROM tbl_Donor d INNER JOIN
                                tbl_Donor_Examine de ON d.DonorID = de.DonorID LEFT OUTER JOIN
                                tbl_TestGroupDetail tgd ON de.DonorExCode = tgd.BloodID where d.DonorCode = @IdentityID order by datein desc";
            var DonnorEx = await Dataprovider.QueryMapperAsync<TestGroupDetail>(Donnor, new { IdentityID = IdentityID });
            foreach (var item in DonnorEx)
            {
                HistoryDonnor historyDonnorVM = new HistoryDonnor();
                if (item != null)
                {
                    historyDonnorVM.DateIn = item?.DateIn;
                    historyDonnorVM.ABORH = item?.KetLuan;
                    if (!string.IsNullOrEmpty(item.SID))
                    {
                        string QueryResultBlood = @"SELECT  top (3)  LOWER(Result) as Result , TestCode
                                                    FROM  tbl_ResultBlood WHERE (SIDRoot = @SID) AND (NAT = 1) order by DateInsert desc ";

                        var TableSID = await Dataprovider.QueryMapperAsync<Donnor.ResultBlood>(QueryResultBlood, new { SID = item.SID });

                        int PointBIC = 0;
                        foreach (var items in TableSID)
                        {
                            PointBIC += CheckBCI(items.Result);
                            historyDonnorVM.resultBloods.Add(items);
                        }
                        if (PointBIC < 0)
                            historyDonnorVM.BCI = "Âm tính";
                        if (PointBIC == 0)
                            historyDonnorVM.BCI = "Chưa rõ kết quả";
                        if (PointBIC > 0)
                            historyDonnorVM.BCI = "Nghi ngờ";


                        string queryResult = " Select IsNull(Result2,Result) as Result,LEFT(c.ConfigID,3) as TestCode " +
                                             " from tbl_ResultBlood rb " +
                                             " join tbl_Config c on rb.TestCode = c.Value and c.ConfigID in ('HBVTestCodeMaping','HCVTestCodeMaping','HIVTestCodeMaping') " +
                                             " where SIDRoot=@SID and SIDchild=@SID " +
                                             " and TestCode in (Select value from tbl_Config where ConfigID in ('HBVTestCodeMaping','HCVTestCodeMaping','HIVTestCodeMaping'))";


                        var TableResult = await Dataprovider.QueryMapperAsync<Donnor.ResultBlood>(queryResult, new { SID = item.SID });

                        foreach (var items in TableResult)
                        {
                            items.Result = (bool)items.Result?.ToLower().Contains("không phản ứng") ? "Không phản ứng" : (bool)items.Result?.ToLower().Contains("phản ứng") ? "Phản ứng" : items.Result;
                            historyDonnorVM.results.Add(items);
                        }


                    }
                    else
                    {
                        historyDonnorVM.BCI = "Chưa rõ kết quả";
                    }

                }
                historyDonnor.Add(historyDonnorVM);
            }

            aPIresult.Data = historyDonnor;
            return aPIresult;
        }

        public async Task<HttpObjectData.APIresult> SyncDonorDelay(Model.BloodDonationDelay delay)
        {
            if (!string.IsNullOrEmpty(delay.DonorNameUnsign))
            {
                delay.DonorNameUnsign = await SetNameUnsign(delay.DonorNameUnsign);
            }
            delay.Sex = Common.ConvertSex(delay.Sex);
            delay.IdentityID = await GetAutoGeneratedIdentityID();
            delay.LeverDelay = await GetLeverDelay(delay.DonorCode) == null ? 1 : await GetLeverDelay(delay.DonorCode) + 1;
            string rowguid = "declare @ID nvarchar(100); set @ID = (select NEWID());";
            string delayrowguid = "declare @DelayID nvarchar(100); set @DelayID = (select NEWID());";
            if (delay.RegisterDate == null) delay.RegisterDate = DateTime.Now;
            delay.rowguild = new Guid();
            string SQL = $@"BEGIN
                                    --- Xử lý ở Donnor
                                       IF NOT EXISTS (SELECT * FROM tbl_Donor D  WHERE (D.IdentityID =@IdentityID or D.DonorCode = @DonorCode))
                                                       BEGIN
                                         Print('Insert Patient')
                                        insert into tbl_Donor (DateIn,DonorCode, sex,  Age , CCCD,Address,DonorName,DonorNameUnsign,Phone,BirthDay, TypeOf,DonorIdentity, rowguid , JobID, ContactAddress, ABO, Rh ) values(CAST(GETDATE() AS DATE),@DonorCode,@Sex,@Age,@CCCD,@Address,@DonorName,@DonorNameUnsign,@Phone,@BirthDay,1,@IdentityID,@ID,@JobID,@ContactAddress,@ABO_Donor,@Rh_Donor );
                                         END
                                       ELSE
                                        BEGIN
                                        Print('Update Patient')
                                        update tbl_Donor set DonorCode=@DonorCode, sex=@Sex,  Age=@Age, CCCD=@CCCD, Address=@Address,DonorName=@DonorName,DonorNameUnsign=@DonorNameUnsign,Phone=@Phone,BirthDay=@BirthDay, JobID=@JobID , ContactAddress=@ContactAddress, ABO=@ABO_Donor,Rh=@Rh_Donor where  (DonorIdentity=@IdentityID   or DonorCode=@DonorCode);   
                                      end
		                                BEGIN
		                                Print('Insert Blood_Donation_Delay')
			                                Insert into tbl_Blood_Donation_Delay
                                            (rowguild, DonorID,
                                            RegisterDate,LeverDelay,
                                            Delay,TimeDelay,
                                            HIV,
                                            HCV,
                                            HBV,
                                            VDRL,                                         
                                            AIDS,
                                            VG,
                                            Xam,
                                            CJD,
                                            Hormon,
                                            Weight,
                                            BloodPressure,
                                            Pulse,
                                            Temperature,
                                            Hb,
                                            HealthHistory,
                                            Other3,
                                            MCV,
                                            Hct,
                                            WBCQuantity,
                                            SmallVeins,
                                            PLTQuantity,
                                            TimeBloodDonorsReiterated,
                                            HBsAgTN,
                                            Other1,
                                            KQHIV,
                                            KQHCV,
                                            KQHBV,
                                            KQVDRL,
                                            CoombsTT,
                                            KTBT,
                                            HBsAg,
                                            ABO,
                                            Rh) 
                                            values
                                            (@DelayID, @DonorCode,
                                            @RegisterDate,@LeverDelay,
                                            @Delay,
                                            @TimeDelay,
                                            @HIV, 
                                            @HCV, 
                                            @HBV, 
                                            @VDRL,
                                            @AIDS,
                                            @VG,
                                            @Xam,
                                            @CJD,
                                            @Hormon,
                                            @Weight,
                                            @BloodPressure,
                                            @Pulse, 
                                            @Temperature, 
                                            @Hb, 
                                            @HealthHistory, 
                                            @Other3,
                                            @MCV, 
                                            @Hct, 
                                            @WBCQuantity, 
                                            @SmallVeins, 
                                            @PLTQuantity, 
                                            @TimeBloodDonorsReiterated, 
                                            @HBsAgTN, 
                                            @Other1, 
                                            @KQHIV,
                                            @KQHCV,
                                            @KQHBV,
                                            @KQVDRL,
                                            @CoombsTT, 
                                            @KTBT, 
                                            @HBsAg, 
                                            @ABO, 
                                            @Rh
                                            ); 

                                            Print('Insert Blood_Donation_Delay_Log')
			                                Insert into tbl_Blood_Donation_Delay_Log
                                            (AutoID,rowguild, 
                                            DonorID,
                                            Action,Upload,isNew,isUpdate,
                                            RegisterDate,LeverDelay,
                                            Delay,TimeDelay,
                                            HIV,
                                            HCV,
                                            HBV,
                                            VDRL,                                         
                                            AIDS,
                                            VG,
                                            Xam,
                                            CJD,
                                            Hormon,
                                            Weight,
                                            BloodPressure,
                                            Pulse,
                                            Temperature,
                                            Hb,
                                            HealthHistory,
                                            Other3,
                                            MCV,
                                            Hct,
                                            WBCQuantity,
                                            SmallVeins,
                                            PLTQuantity,
                                            TimeBloodDonorsReiterated,
                                            HBsAgTN,
                                            Other1,
                                            KQHIV,
                                            KQHCV,
                                            KQHBV,
                                            KQVDRL,
                                            CoombsTT,
                                            KTBT,
                                            HBsAg,
                                            ABO,
                                            Rh) 
                                            values
                                            ((select Top(1)  DonorID from tbl_Donor where  DonorCode=@DonorCode), (select NEWID()), 
                                            @DonorCode,
                                            N'Nhập mới',0,1,0,
                                            GETDATE(),@LeverDelay,
                                            @Delay,
                                            @TimeDelay,
                                            @HIV, 
                                            @HCV, 
                                            @HBV, 
                                            @VDRL,
                                            @AIDS,
                                            @VG,
                                            @Xam,
                                            @CJD,
                                            @Hormon,
                                            @Weight,
                                            @BloodPressure,
                                            @Pulse, 
                                            @Temperature, 
                                            @Hb, 
                                            @HealthHistory, 
                                            @Other3,
                                            @MCV, 
                                            @Hct, 
                                            @WBCQuantity, 
                                            @SmallVeins, 
                                            @PLTQuantity, 
                                            @TimeBloodDonorsReiterated, 
                                            @HBsAgTN, 
                                            @Other1, 
                                            @KQHIV,
                                            @KQHCV,
                                            @KQHBV,
                                            @KQVDRL,
                                            @CoombsTT, 
                                            @KTBT, 
                                            @HBsAg, 
                                            @ABO, 
                                            @Rh
                                            )


		                                END                            
                                END";
            string Query = rowguid + Environment.NewLine + delayrowguid + Environment.NewLine + SQL;
            return await Dataprovider.ExcuteQueryAsync(Query, delay);
        }

        public async Task<HttpObjectData.APIresult> SyncDeleteDonorDelay(Model.BloodDonationDelay delay)
        {
            string SQL = $@"BEGIN
		                                BEGIN
                                            Print('Insert Blood_Donation_Delay_Del')
                                            Insert into tbl_Blood_Donation_Delay_Del
                                            (AutoID, 
                                            DonorID,
                                            RegisterDate,LeverDelay,
                                            Delay,TimeDelay,
                                            HIV,
                                            HCV,
                                            HBV,
                                            VDRL,                                         
                                            AIDS,
                                            VG,
                                            Xam,
                                            CJD,
                                            Hormon,
                                            Weight,
                                            BloodPressure,
                                            Pulse,
                                            Temperature,
                                            Hb,
                                            HealthHistory,
                                            Other3,
                                            MCV,
                                            Hct,
                                            WBCQuantity,
                                            SmallVeins,
                                            PLTQuantity,
                                            TimeBloodDonorsReiterated,
                                            HBsAgTN,
                                            Other1,
                                            KQHIV,
                                            KQHCV,
                                            KQHBV,
                                            KQVDRL,
                                            CoombsTT,
                                            KTBT,
                                            HBsAg,
                                            ABO,
                                            Rh,Comment) 
                                            values
                                            ((select Top(1)  DonorID from tbl_Donor where  DonorCode=@DonorCode),
                                            @DonorCode,
                                            GETDATE(),(Select LeverDelay from tbl_Blood_Donation_Delay Where DonorID = @DonorCode and FORMAT(RegisterDate, 'yyyy-MM-dd HH:mm') = FORMAT(@RegisterDate, 'yyyy-MM-dd HH:mm')) ,
                                            @Delay,
                                            @TimeDelay,
                                            @HIV, 
                                            @HCV, 
                                            @HBV, 
                                            @VDRL,
                                            @AIDS,
                                            @VG,
                                            @Xam,
                                            @CJD,
                                            @Hormon,
                                            @Weight,
                                            @BloodPressure,
                                            @Pulse, 
                                            @Temperature, 
                                            @Hb, 
                                            @HealthHistory, 
                                            @Other3,
                                            @MCV, 
                                            @Hct, 
                                            @WBCQuantity, 
                                            @SmallVeins, 
                                            @PLTQuantity, 
                                            @TimeBloodDonorsReiterated, 
                                            @HBsAgTN, 
                                            @Other1, 
                                            @KQHIV,
                                            @KQHCV,
                                            @KQHBV,
                                            @KQVDRL,
                                            @CoombsTT, 
                                            @KTBT, 
                                            @HBsAg, 
                                            @ABO, 
                                            @Rh,@Comment
                                            );
		                                    Print('Delete Blood_Donation_Delay')
			                                Delete tbl_Blood_Donation_Delay Where DonorID = @DonorCode and FORMAT(RegisterDate, 'yyyy-MM-dd HH:mm') = FORMAT(@RegisterDate, 'yyyy-MM-dd HH:mm')
                                     
		                                END                            
                                END";
            //await _connectionSQL.ExcuteQueryAsync("SQL_CONNECTION_REGION1", SQL, delay);
            return await Dataprovider.ExcuteQueryAsync(SQL, delay);
        }

        public async Task<HttpObjectData.APIresult> GetDelayDonor(string DonorCode)
        {
            HttpObjectData.APIresult aPIresult = new HttpObjectData.APIresult();
            List<PersonDonateDelay> delayDonnor = new List<PersonDonateDelay>();
            string sql = "Select top 1 * from tbl_Blood_Donation_Delay Where DonorID = @DonorCode ";


            var DonnorEx = await Dataprovider.QueryMapperAsync<BloodDonationDelay>(sql, new { DonorCode = DonorCode });
            foreach (var item in DonnorEx)
            {
                PersonDonateDelay personDonateDelay = new PersonDonateDelay();
                if (item != null)
                {
                    personDonateDelay.DelayDate = item.RegisterDate;
                    personDonateDelay.DelayTimeline = item.Delay;
                    personDonateDelay.DelayTime = item.TimeDelay;
                    personDonateDelay.HIV_Infection = item.HIV;
                    personDonateDelay.HCV_Infection = item.HCV;
                    personDonateDelay.HBV_Infection = item.HBV;
                    personDonateDelay.VDRL_Infection = item.VDRL;
                    personDonateDelay.AIDS_Risk = item.AIDS;
                    personDonateDelay.Liver_Risk = item.VG;
                    personDonateDelay.Tattoo = item.Xam;
                    personDonateDelay.CJD = item.CJD;
                    personDonateDelay.Hormon = item.Hormon;
                    personDonateDelay.Weight = item.Weight;
                    personDonateDelay.BloodPressure = item.BloodPressure;
                    personDonateDelay.Pulse = item.Pulse;
                    personDonateDelay.Temperature = item.Temperature;
                    personDonateDelay.Hb = item.Hb;
                    personDonateDelay.HealthHistory = item.HealthHistory;
                    personDonateDelay.HealthHistoryDetail = item.Other3;
                    personDonateDelay.MCV = item.MCV;
                    personDonateDelay.HCT = item.Hct;
                    personDonateDelay.WhiteBloodCellQuantity = item.WBCQuantity;
                    personDonateDelay.SmallVen = item.SmallVeins;
                    personDonateDelay.PlateletQuantity = item.PLTQuantity;
                    personDonateDelay.TimeBloodDonorsReiterated = item.TimeBloodDonorsReiterated;
                    personDonateDelay.HbsAg = item.HBsAgTN;
                    personDonateDelay.Other = item.Other1;
                    personDonateDelay.HIV_Positive = item.KQHIV;
                    personDonateDelay.HCV_Positive = item.KQHCV;
                    personDonateDelay.HBV_Positive = item.KQHBV;
                    personDonateDelay.VDRL_Positive = item.KQVDRL;
                    personDonateDelay.CoombsTT_Positive = item.CoombsTT;
                    personDonateDelay.KTBT_Positive = item.KTBT;
                    personDonateDelay.HBsAg_Positive = item.HBsAg;
                    personDonateDelay.ABO_Undetermined = item.ABO;
                    personDonateDelay.Rh_Undetermined = item.Rh;


                }
                delayDonnor.Add(personDonateDelay);
            }
            var settings = new JsonSerializerSettings
            {
                ContractResolver = new DefaultContractResolver
                {
                    NamingStrategy = new DefaultNamingStrategy() // This will preserve the original casing
                }
            };
            aPIresult.Data = aPIresult.Data = JsonConvert.SerializeObject(delayDonnor, settings);

            return aPIresult;
        }

        public async Task SendTestBB(string SID, List<TestCodeInfo> testcodes, string UserAction)
        {
            foreach (var item in testcodes)
            {
                if (item.TestType == TestType.NAT)
                {
                    if (!string.IsNullOrEmpty(item.TestCode))
                    {
                        var itemResultBlood = new Model.ResultBlood { SIDRoot = SID, SIDChild = SID, TestCode = item.TestCode, NAT = true };
                        if (!await CheckExistTestOrder(itemResultBlood))
                        {
                            string sql = "insert tbl_ResultBlood (SIDRoot, SIDchild, UserInsert, DateInsert,TestCode, NAT ) values ( @SIDRoot,  @SIDChild , 'admin',GETDATE(),@TestCode, @NAT )";
                            await Dataprovider.ExcuteQueryAsync(sql, itemResultBlood);
                        }
                    }
                    if (!string.IsNullOrEmpty(item.MappingTestCode))
                    {
                        var itemResultBloodSL = new Model.ResultBlood { SIDRoot = SID, SIDChild = SID, TestCode = item.MappingTestCode };
                        if (!await CheckExistTestOrder(itemResultBloodSL))
                        {
                            string sql = "insert tbl_ResultBlood (SIDRoot, SIDchild, UserInsert, DateInsert,TestCode, NAT ) values ( @SIDRoot,  @SIDChild , 'admin',GETDATE(),@TestCode, @NAT )";
                            await Dataprovider.ExcuteQueryAsync(sql, itemResultBloodSL);
                        }
                    }
                }
                else
                {
                    if (!string.IsNullOrEmpty(item.TestCode))
                    {
                        var itemResultBlood = new Model.ResultBlood { SIDRoot = SID, SIDChild = SID, TestCode = item.TestCode };
                        if (!await CheckExistTestOrder(itemResultBlood))
                        {
                            string sql = "insert tbl_ResultBlood (SIDRoot, SIDchild, UserInsert, DateInsert,TestCode, NAT ) values ( @SIDRoot,  @SIDChild , 'admin',GETDATE(),@TestCode, @NAT )";
                            await Dataprovider.ExcuteQueryAsync(sql, itemResultBlood);
                        }
                    }
                }
            }

            string sqlUpdate = "Update tbl_Blood SET IsSentTest = 1 WHERE SID =  @SID";
            await Dataprovider.ExcuteQueryAsync(sqlUpdate, new { SID = SID });
        }

        public async Task SendTestLis(string SID, string BloodID, string ObjectOrder, string LocationOrder, List<TestCodeInfo> testcodes, List<string> profiles, string UserAction)
        {
            var patientInfo = new PatientInfo();
            patientInfo.PatientID = BloodID;
            patientInfo.MaYTe = BloodID;
            patientInfo.OrderID = Guid.NewGuid().ToString().Replace("-", "");
            patientInfo.SampleID = SID;
            patientInfo.Sequence = GetSeqFromSid(SID);
            patientInfo.HoTen = BloodID.ToUpper();
            patientInfo.GioChiDinh = DateTime.Now.Date.ToString("yyyy-MM-dd HH:mm:ss");
            patientInfo.GioChiDinh_DateTime = DateTime.Now.Date;
            patientInfo.MaDoiTuong = ObjectOrder;
            patientInfo.MaKhoaPhong = LocationOrder;
            patientInfo.CapCuu = false;
            patientInfo.DateGet = DateTime.Now;
            patientInfo.HisCode = "BloodBank";

            if (patientInfo.NgaySinh_DateTime == null)
            {
                if (patientInfo.NamSinh < 100)
                {
                    var yearOfBirth = DateTime.Now.Year - patientInfo.NamSinh;
                    var ngaySinh = new DateTime(yearOfBirth, 1, 1);
                    patientInfo.NgaySinh = string.Format("{0:yyyy-MM-dd}", ngaySinh);
                }
                else
                {
                    patientInfo.NgaySinh = string.Format("{0:yyyy-MM-dd}",
                        new DateTime(patientInfo.NamSinh, 1, 1));
                }
            }

            foreach (var testcode in testcodes.Where(m => m.TestType != TestType.ABORH).ToList())
            {
                patientInfo.ListTestOrder.Add(new LisTestOrder()
                {
                    MaDV = testcode.TestCode,
                });
                if (!string.IsNullOrEmpty(testcode.MappingTestCode))
                {
                    patientInfo.ListTestOrder.Add(new LisTestOrder()
                    {
                        MaDV = testcode.MappingTestCode,
                    });
                }
            }

            foreach (var profile in profiles)
            {
                patientInfo.ListTestProfileOrder.Add(new LisProfileOrder()
                {
                    MaProfile = profile,
                    OrderDetailID = Guid.NewGuid().ToString().Replace("-", ""),
                });
            }

            bool useNormalRangeByBirthday = await IsNormalRangeByDayEnable();
            bool validatePatient = await ValidatePatient(patientInfo);
            if (validatePatient)
            {
                if (!await CheckSIDExist(SID))
                {
                    string sql = "insert into dbo.tbl_patient(patientname, Sex, Age, Doctorid, PDoctorName, PID, OrderID, OrderCode, address, Locationid, Pdescription, SID, seq, DateIn, DateGet, Urgent, ObjectID, Intime, DateOrder, Invoice, DateOfBirth,Bed,InsureNumber, HISCODE) " +
                    " select @HoTen as patientname, " +
                    " @GioiTinh as Sex, @NamSinh as Age, " +
                    " (select top 1 DoctorID from dbo.tbl_Doctor where DoctorHIS=@MaBSChiDinh) as Doctorid, " +
                    " (select top 1 DoctorName from dbo.tbl_Doctor where DoctorHIS=@MaBSChiDinh) as PDoctorName, " +
                    " @PatientId as PID, @OrderID as OrderID, @OrderCode as OrderCode, @Address as address, " +
                    " (select top 1 LocationID from dbo.tbl_Location where LocationHIS=@MaKhoaPhong) as Locationid, " +
                    " @ChanDoan as Pdescription, @SampleID as SID, @Sequence as Seq, CAST(GETDATE() AS DATE) as DateIn, @DateGet as DateGet, @CapCuu as Urgent, " +
                    " (select top 1 ObjectID from dbo.tbl_Object where ObjectHIS=@MaDoiTuong) as ObjectID, getdate() as Intime, @GioChiDinh_DateTime as DateOrder, @MaYte, (CAST(YEAR(GETDATE()) AS CHAR(4)) + '-01-01'), @Bed, @InsureNumber,@HisCode ";
                    await _connectionSQL.ExcuteQueryAsync("SQL_CONNECTION_REGION2", sql, patientInfo);
                }
                else
                {
                    foreach (var item in patientInfo.ListTestOrder)
                    {
                        string sql = @" update tbl_result set Status = null, Result = NULL, UserV = NULL, ValidTime = NULL
                                        , Download = 0, DownTime = NULL,InsDownload = NULL,ReRun=1
                                        where sid = @SID AND Testcode = @TestCode";
                        await _connectionSQL.ExcuteQueryAsync("SQL_CONNECTION_REGION2", sql, new { SID = SID, TestCode = item.MaDV });
                    }
                    foreach (var item in patientInfo.ListTestProfileOrder)
                    {
                        string sql = @" update tbl_result set Status = null, Result = NULL, UserV = NULL, ValidTime = NULL
                                        , Download = 0, DownTime = NULL,InsDownload = NULL,ReRun=1
                                        where sid = @SID AND Testcode = @TestCode";
                        await _connectionSQL.ExcuteQueryAsync("SQL_CONNECTION_REGION2", sql, new { SID = SID, TestCode = item.MaProfile });
                    }
                }

                foreach (var item in patientInfo.ListTestOrder)
                {
                    if (useNormalRangeByBirthday)
                    {
                        string sql = QueryInsertTestWithoutNormalRange(false, item.MaDV, patientInfo.SampleID, item.OrderDetailID, UserAction);
                        await _connectionSQL.ExcuteQueryAsync("SQL_CONNECTION_REGION2", sql);
                    }
                    else
                    {
                        string sql = QueryInsertTest(false, item.MaDV, patientInfo.SampleID, patientInfo.GioiTinh, patientInfo.NamSinh, item.OrderDetailID, UserAction);
                        await _connectionSQL.ExcuteQueryAsync("SQL_CONNECTION_REGION2", sql);
                    }
                }

                foreach (var item in patientInfo.ListTestProfileOrder)
                {
                    if (useNormalRangeByBirthday)
                    {
                        string sql = QueryInsertTestWithoutNormalRange(true, item.MaProfile, patientInfo.SampleID, item.OrderDetailID, UserAction);
                        await _connectionSQL.ExcuteQueryAsync("SQL_CONNECTION_REGION2", sql);
                    }
                    else
                    {
                        string sql = QueryInsertTest(false, item.MaProfile, patientInfo.SampleID, patientInfo.GioiTinh, patientInfo.NamSinh, item.OrderDetailID, UserAction);
                        await _connectionSQL.ExcuteQueryAsync("SQL_CONNECTION_REGION2", sql);
                    }
                }

                if (useNormalRangeByBirthday)
                {
                    var normalRange = await GetNormalRange(patientInfo.SampleID, (patientInfo.NgaySinh_DateTime == null ? new DateTime(patientInfo.NamSinh, 1, 1) : patientInfo.NgaySinh_DateTime.GetValueOrDefault()), (patientInfo.GioiTinh == "M" ? true : false));
                    foreach (var item in normalRange)
                    {
                        var patientNormalRange = await GetPatientNormalRangeInfoAsync((patientInfo.NgaySinh_DateTime == null ? new DateTime(patientInfo.NamSinh, 1, 1) : patientInfo.NgaySinh_DateTime.GetValueOrDefault()), item.TestCode, (patientInfo.GioiTinh == "M" ? true : false), DateTime.Now);
                        if (item.NormalRange != patientNormalRange.PNormalRange
                        || item.LowerLimit != patientNormalRange.PLowerlimit
                        || item.HigherLimit != patientNormalRange.PHigherlimit)
                        {
                            string sql = "update dbo.tbl_result " +
                            " set NormalRange = @NormalRange " +
                            " , NormalRangeF = @NormalRange " +
                            " , LowerLimit = @LowerLimit " +
                            " , HigherLimit = @HigherLimit " +
                            " where SID = @SID and TestCode = @TestCode";
                            await _connectionSQL.ExcuteQueryAsync("SQL_CONNECTION_REGION2", sql, new { TestCode = item.TestCode, SID = patientInfo.SampleID, NormalRange = patientNormalRange.PNormalRange, LowerLimit = patientNormalRange.PLowerlimit, HigherLimit = patientNormalRange.PHigherlimit });
                        }
                    }
                }

            }
        }

        public async Task<DataHanhChinh> GetDataHanhChinh()
        {
            DataHanhChinh result = new DataHanhChinh();
            string SQL = " Select ConfigID,Value from tbl_Config where ConfigID in ('ObjectOrder','LocationOrder') ";
            var data = await Dataprovider.QueryMapperAsync<ConfigInfo>(SQL);
            result.ObjectID = data.FirstOrDefault(x => x.ConfigID.ToUpper() == "OBJECTORDER").Value;
            result.LocationID = data.FirstOrDefault(x => x.ConfigID.ToUpper() == "LOCATIONORDER").Value;
            return result;
        }

        public async Task<List<TestCodeInfo>> GetTestCode()
        {
            var result = new List<TestCodeInfo>();
            string query = " Select TestCode from tbl_TestCodeOrder";
            var testCodeOrder = await Dataprovider.QueryMapperAsync<string>(query);
            string SQL = " Select ConfigID,Value from tbl_Config where ConfigID in ('AboTestCode','RhTestCode','KTBTTestCode','GMaiTestCode','HBVTestCode','HCVTestCode','HIVTestCode','KTBTTestCodeMapingNat','GMaiTestCodeMaping','HBVTestCodeMaping','HCVTestCodeMaping','HIVTestCodeMaping') ";
            var data = await Dataprovider.QueryMapperAsync<ConfigInfo>(SQL);

            foreach (var item in data)
            {
                TestCodeInfo tests = new TestCodeInfo();

                if (item.ConfigID.ToUpper() == "ABOTESTCODE")
                {
                    result.Add(new TestCodeInfo()
                    {
                        TestCode = item.Value,
                        TestName = "",
                        TestType = TestType.ABORH,
                    });
                }
                else if (item.ConfigID.ToUpper() == "RHTESTCODE")
                {
                    result.Add(new TestCodeInfo()
                    {
                        TestCode = item.Value,
                        TestName = "",
                        TestType = TestType.ABORH,
                    });
                }
                else if (item.ConfigID.ToUpper() == "KTBTTESTCODE")
                {
                    result.Add(new TestCodeInfo()
                    {
                        TestCode = item.Value,
                        TestName = "",
                        TestType = TestType.NAT,
                        MappingTestCode = data.FirstOrDefault(x => x.ConfigID.ToUpper() == "KTBTTESTCODEMAPINGNAT")?.Value
                    });
                }
                else if (item.ConfigID.ToUpper() == "GMAITESTCODE")
                {
                    result.Add(new TestCodeInfo()
                    {
                        TestCode = item.Value,
                        TestName = "",
                        TestType = TestType.NAT,
                        MappingTestCode = data.FirstOrDefault(x => x.ConfigID.ToUpper() == "GMAITESTCODEMAPING")?.Value
                    });
                }
                else if (item.ConfigID.ToUpper() == "HBVTESTCODE")
                {
                    result.Add(new TestCodeInfo()
                    {
                        TestCode = item.Value,
                        TestName = "",
                        TestType = TestType.NAT,
                        MappingTestCode = data.FirstOrDefault(x => x.ConfigID.ToUpper() == "HBVTESTCODEMAPING")?.Value
                    });
                }
                else if (item.ConfigID.ToUpper() == "HCVTESTCODE")
                {
                    result.Add(new TestCodeInfo()
                    {
                        TestCode = item.Value,
                        TestName = "",
                        TestType = TestType.NAT,
                        MappingTestCode = data.FirstOrDefault(x => x.ConfigID.ToUpper() == "HCVTESTCODEMAPING")?.Value
                    });
                }
                else if (item.ConfigID.ToUpper() == "HIVTESTCODE")
                {
                    result.Add(new TestCodeInfo()
                    {
                        TestCode = item.Value,
                        TestName = "",
                        TestType = TestType.NAT,
                        MappingTestCode = data.FirstOrDefault(x => x.ConfigID.ToUpper() == "HIVTESTCODEMAPING")?.Value
                    });
                }
            }

            foreach (var item in testCodeOrder)
            {
                if (result.Where(m => m.TestCode == item).ToList().Count == 0)
                {
                    result.Add(new TestCodeInfo { TestCode = item, TestType = TestType.MD });
                }
            }

            return result;
        }

        public async Task<List<string>> GetListProfile()
        {
            string query = " Select TestCode from tbl_TestCodeOrder";
            var profileOrder = await Dataprovider.QueryMapperAsync<string>(query);
            return profileOrder.ToList();
        }

        public async Task<List<SidNormalRange>> GetNormalRange(string SID, DateTime dateOfBirth, bool isMale)
        {
            var result = new List<SidNormalRange>();

            string query = "select Testcode, NormalRange" +
                ", LowerLimit " +
                ", HigherLimit " +
                " from dbo.tbl_result where SID = @SID";
            var data = await _connectionSQL.QueryMapperAsync<NormalRangeInfo>("SQL_CONNECTION_REGION2", query, new { SID = SID });
            foreach (var item in data)
            {
                result.Add(new SidNormalRange()
                {
                    SID = SID,
                    DateOfBirth = dateOfBirth,
                    IsMale = isMale,
                    TestCode = item.TestCode,
                    NormalRange = item.NormalRange,
                    HigherLimit = item.HigherLimit,
                    LowerLimit = item.LowerLimit
                });
            }
            return result;
        }

        private int CheckBCI(string Result)
        {
            switch (Result)
            {
                case "phản ứng":
                    return 10;
                case "không phản ứng":
                    return -1;
                default:
                    return 0;
            }
        }

        public async Task<bool> IsNormalRangeByDayEnable()
        {
            int? data = null;
            string sql = "select top 1 object_id " +
                " from sys.tables sys_t " +
                " where sys_t.name = 'NormalRangeCalculateType'";
            var response = await _connectionSQL.SingleOrDefaultAsync("SQL_CONNECTION_REGION2", sql);
            if (response.code == HttpObject.Enums.Httpstatuscode_API.OK && response.Data != null)
            {
                data = response.Data.object_id;
            }
            return data != null;
        }

        public async Task<bool> ValidatePatient(PatientInfo PatientInfo)
        {
            bool result = true;
            if (PatientInfo == null)
            {
                return false;
            }

            if (!string.IsNullOrEmpty(PatientInfo.MaKhoaPhong))
            {
                string sql = "Select count(*) as total from tbl_Location where LocationID = @LocationID";
                var response = await _connectionSQL.SingleOrDefaultAsync("SQL_CONNECTION_REGION2", sql, new { LocationID = PatientInfo.MaKhoaPhong });
                if (response.code == HttpObject.Enums.Httpstatuscode_API.OK && response.Data != null)
                {
                    if (response.Data.total == 0) return false;
                }
            }

            if (!string.IsNullOrEmpty(PatientInfo.MaDoiTuong))
            {
                string sql = "Select count(*) as total from tbl_Location where LocationID = @LocationID";
                var response = await _connectionSQL.SingleOrDefaultAsync("SQL_CONNECTION_REGION2", sql, new { LocationID = PatientInfo.MaKhoaPhong });
                if (response.code == HttpObject.Enums.Httpstatuscode_API.OK && response.Data != null)
                {
                    if (response.Data.total == 0) return false;
                }
            }

            if (!string.IsNullOrEmpty(PatientInfo.MaKhoaPhong))
            {
                string sql = "Select count(*) as total from tbl_Object where ObjectID = @ObjectID";
                var response = await _connectionSQL.SingleOrDefaultAsync("SQL_CONNECTION_REGION2", sql, new { ObjectID = PatientInfo.MaDoiTuong });
                if (response.code == HttpObject.Enums.Httpstatuscode_API.OK && response.Data != null)
                {
                    if (response.Data.total == 0) return false;
                }
            }

            if (!string.IsNullOrEmpty(PatientInfo.MaBSChiDinh))
            {
                string sql = "Select count(*) as total from tbl_Doctor where DoctorID = @DoctorID";
                var response = await _connectionSQL.SingleOrDefaultAsync("SQL_CONNECTION_REGION2", sql, new { DoctorID = PatientInfo.MaBSChiDinh });
                if (response.code == HttpObject.Enums.Httpstatuscode_API.OK && response.Data != null)
                {
                    if (response.Data.total == 0) return false;
                }
            }

            return result;
        }

        public async Task<bool> CheckSIDExist(string SID)
        {
            string data = string.Empty;
            string sql = " Select top 1 p.SID from tbl_Patient p Where REPLACE(p.SID, '=', '') = @SID ";
            var response = await _connectionSQL.SingleOrDefaultAsync("SQL_CONNECTION_REGION2", sql, new { SID = SID });
            if (response.code == HttpObject.Enums.Httpstatuscode_API.OK && response.Data != null)
            {
                data = response.Data.SID;
            }

            return !string.IsNullOrEmpty(data);
        }

        private string GetSeqFromSid(string fullSid)
        {
            string[] seqVars = fullSid.Split('-');
            string seq = fullSid;
            if (seqVars.Length > 1)
            {
                seq = seqVars[1];
            }

            return seq;
        }

        public string QueryInsertTestWithoutNormalRange(bool _isProfile, string _TestCode, string SID, string _OrderID, string userAction)
        {
            bool _haveOrder = false;
            if (!string.IsNullOrEmpty(_OrderID))
            {
                _haveOrder = _OrderID.Length > 0;
            }

            string strSQL = "insert dbo.tbl_result(SID,TestCode,Price,Result,Updatetime,TestName,NormalRange,NormalRangeF,PrintOrder,TestHead,Category,LowerLimit,HigherLimit,Unit,Profile,UserI,Bold,Cost,Criteria,Type,BLLower,BLHigher,convertionNo,Normalrange1,NormalrangeF1,Unit1,OrderID,TestCodeHIS,TestID,ExcludeGroup,DeltaType,Validity,Boundary,Range,TestNameFontSize,ResultFontSize,ResultBold,SendTest,ProfileID, NormalRangeWarning, LowerWarning, HigherWarning) \n";
            strSQL += " select distinct '" + SID.Trim() + "',T.TestCode,Price,(case when len(rtrim(NormalResult))=0 then Null else NormalResult end) as NormalResult,(case when len(rtrim(NormalResult))= 0 then Null else getdate() end),T.TestName " +
                " , t.NormalRange as NormalRange " +
                " , t.NormalRangeF as NormalRangeF " +
                " , PrintOrder,TestHead " +
                " , Category" +
                " , t.LowerLimit as LowerLimit " +
                " , t.HigherLimit as HigherLimit " +
                " , T.Unit,Profile,'" + userAction + "'\n" +
                " , Bold, isnull(O.Cost,t.price),Criteria,T.Type,BLLower,BLHigher,convertionNo,'','','','" + _OrderID + "'\n" +
            (_haveOrder == true ? ",isnull((SELECT top 1 isnull(his.testCodeHIS, his.profileID) from Tbl_testCode_HIS his where his.TestCode = T.TestCode), T.testCodeHIS) AS TestCodeHIS, isnull((SELECT top 1 isnull(his.testCodeHIS, his.profileID) from Tbl_testCode_HIS his where his.TestCode = T.TestCode), T.testCodeHIS) as TestID " : ",T.TestCodeHIS,T.TestCodeHIS") +
                ",T.ExcludeGroup,T.DeltaType,T.Validity,T.Boundary,T.Range,T.TestNameFontSize,T.ResultFontSize,T.ResultBold,T.SendTest," + (_isProfile == true ? "P.ProfileID" : "NULL") +
                ",T.NormalRangeWarning , T.LowerWarning, T.HigherWarning ";
            strSQL += " from \n" +
                (_isProfile == true ? " tbl_TestCode T inner join tbl_ProfileTest P on T.Testcode=P.Testcode \n" : "tbl_TestCode T ") +
                " left join tbl_Object_Test O on T.testcode=O.testcode\n" +
                " and o.ObjectID = (SELECT pInner.ObjectID " +
                "                   FROM dbo.tbl_patient pInner WHERE pInner.SID = '" + SID.Trim() + "') " +
                (_haveOrder == true ? " left join Tbl_testCode_HIS H on T.TestCode=H.TestCode \n" : "");

            if (_isProfile == true)
            {
                strSQL += " where P.ProfileID='" + _TestCode + "' " +
                    " and T.Optional=0 " +
                    " and T.TestCode not in (select testcode from dbo.tbl_result where SID='" + SID.Trim() + "')";
            }
            else
            {
                strSQL += " where T.TestCode='" + _TestCode + "' " +
                    " and T.Optional=0 " +
                    " and T.TestCode not in (select testcode from dbo.tbl_result where SID='" + SID.Trim() + "')";
            }
            strSQL += " order by T.testcode";

            return strSQL;
        }

        public string QueryInsertTest(bool _isProfile, string _TestCode, string SID, string Sex, int Age, string _OrderID, string userAction)
        {
            bool _haveOrder = false;
            if (!string.IsNullOrEmpty(_OrderID))
            {
                _haveOrder = _OrderID.Length > 0;
            }

            string strSQL = "insert dbo.tbl_result(SID,TestCode,Price,Result,Updatetime,TestName,NormalRange,NormalRangeF,PrintOrder,TestHead,Category,LowerLimit,HigherLimit,Unit,Profile,UserI,Bold,Cost,Criteria,Type,BLLower,BLHigher,convertionNo,Normalrange1,NormalrangeF1,Unit1,OrderID,TestCodeHIS,TestID,ExcludeGroup,DeltaType,Validity,Boundary,Range,TestNameFontSize,ResultFontSize,ResultBold,SendTest,ProfileID, NormalRangeWarning, LowerWarning, HigherWarning) \n";
            strSQL += " select distinct '" + SID.Trim() + "',T.TestCode,Price,(case when len(rtrim(NormalResult))=0 then Null else NormalResult end) as NormalResult,(case when len(rtrim(NormalResult))= 0 then Null else getdate() end),T.TestName,isnull(PNormalRange,NormalRange),isnull(PNormalRange,NormalRangeF),PrintOrder,TestHead,Category,isnull(PLowerLimit,LowerLimit),isnull(PHigherLimit,HigherLimit),T.Unit,Profile,'" + userAction + "'\n" +
                ",Bold, isnull(O.Cost,t.price),Criteria,T.Type,BLLower,BLHigher,convertionNo,'','','','" + _OrderID + "'\n" +
            //(_haveOrder == true ? ",H.testCodeHIS,H.testCodeHIS" : ",T.TestCodeHIS,T.TestCodeHIS") + ",T.ExcludeGroup,T.DeltaType,T.Validity,T.Boundary,T.Range,T.TestNameFontSize,T.ResultFontSize,T.ResultBold,T.SendTest," + (_isProfile == true ? "P.ProfileID" : "NULL");
            (_haveOrder == true ? ",isnull((SELECT top 1 isnull(his.testCodeHIS, his.profileID) from Tbl_testCode_HIS his where his.TestCode = T.TestCode), T.testCodeHIS) AS TestCodeHIS, isnull((SELECT top 1 isnull(his.testCodeHIS, his.profileID) from Tbl_testCode_HIS his where his.TestCode = T.TestCode), T.testCodeHIS) as TestID " : ",T.TestCodeHIS,T.TestCodeHIS") +
                ",T.ExcludeGroup,T.DeltaType,T.Validity,T.Boundary,T.Range,T.TestNameFontSize,T.ResultFontSize,T.ResultBold,T.SendTest," + (_isProfile == true ? "P.ProfileID" : "NULL") +
                ",T.NormalRangeWarning , T.LowerWarning, T.HigherWarning ";
            strSQL += " from \n" +
                (_isProfile == true ? " tbl_TestCode T inner join tbl_ProfileTest P on T.Testcode=P.Testcode \n" : "tbl_TestCode T ") +
                " left join tbl_Object_Test O on T.testcode=O.testcode\n" +
                " and o.ObjectID = (SELECT pInner.ObjectID " +
                "                   FROM dbo.tbl_patient pInner WHERE pInner.SID = '" + SID.Trim() + "') " +
                (_haveOrder == true ? " left join Tbl_testCode_HIS H on T.TestCode=H.TestCode \n" : "") +
                " left join tbl_pnormalrange NMR on (T.testcode=NMR.Testcode and (FromAge<=" + (DateTime.Now.Year - (Age == 0 ? DateTime.Now.Year : Age)) + " and ToAge>=" + (DateTime.Now.Year - (Age == 0 ? DateTime.Now.Year : Age)) + " and " + (Sex == "F" ? " PSex=0 " : (Sex == "M" ? " PSex=1 " : " PSex is null ")) + "))";

            if (_isProfile == true)
            {
                strSQL += " where P.ProfileID='" + _TestCode + "' " +
                    " and T.Optional=0 " +
                    " and T.TestCode not in (select testcode from dbo.tbl_result where SID='" + SID.Trim() + "')";
            }
            else
            {
                strSQL += " where T.TestCode='" + _TestCode + "' " +
                    " and T.Optional=0 " +
                    " and T.TestCode not in (select testcode from dbo.tbl_result where SID='" + SID.Trim() + "')";
            }
            strSQL += " order by T.testcode";
            return strSQL;
        }

        public async Task<PatientNormalRangeInfo> GetPatientNormalRangeInfoAsync(DateTime dateOfBirth, string TestCode, bool isMale, DateTime dateIn)
        {
            PatientNormalRangeInfo result = new PatientNormalRangeInfo();
            const string ColumnSelect = " AutoId, TestCode, FromAge, ToAge, PSex, PNormalRange, PLowerlimit, PHigherlimit, CalculateType ";
            const string TableSelect = " from dbo.Tbl_PNormalRange where TestCode = @TestCode and PSex = @PSex ";

            string sql = "select top 1 " + ColumnSelect + " from ( " +
                " select " + ColumnSelect + TableSelect + " and CalculateType = 1 and DATEDIFF (day, @DateOfBirth, @DateIn) between FromAge and ToAge " +
                " union select " + ColumnSelect + TableSelect + " and CalculateType = 2 and DATEDIFF (MONTH, @DateOfBirth, @DateIn) between FromAge and ToAge " +
                " union select " + ColumnSelect + TableSelect + " and CalculateType = 3 and DATEDIFF (YEAR, @DateOfBirth, @DateIn) between FromAge and ToAge) as SelectAllNormalRange";
            var data = await _connectionSQL.QueryMapperAsync<PatientNormalRangeInfo>("SQL_CONNECTION_REGION2", sql, new { TestCode = TestCode, PSex = isMale, DateOfBirth = dateOfBirth, DateIn = dateIn });
            if (data.ToList().Count > 0) return data.ToList()[0];
            else return result;

        }

        public async Task<bool> CheckExistTestOrder(Model.ResultBlood resultBlood)
        {
            string data = string.Empty;
            string sql = "SELECT SIDRoot FROM tbl_ResultBlood WHERE SIDRoot=@SIDRoot and SidChild=@SIDChild and TestCode=@TestCode";
            var response = await Dataprovider.SingleOrDefaultAsync(sql, resultBlood);
            if (response.code == HttpObject.Enums.Httpstatuscode_API.OK && response.Data != null)
            {
                data = response.Data.SIDRoot;
            }
            return !string.IsNullOrEmpty(data);
        }
    }
}
