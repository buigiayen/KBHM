using BloodBank.api.interfaces;
using BloodBank.api.Model;
using Services.lib.BloodBank;
using Services.lib.Http;
using Services.lib.Sql;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using static BloodBank.api.Model.Donnor;

namespace BloodBank.api.command
{
    public class SyncPatient : ISyncDonnor
    {
        private async Task<HttpObject.APIMapper<SequenceNumInfo>> GetNextSequence()
        {

            string sql = "Select SequenceId, StartNum, EndNum, CurrentVal, Mode, UpdateTime, getdate() as ServerTime " +
                "from dbo.SequenceConfig  where SequenceId=@SequenceId ";
            var sequenceNum = await Services.lib.Sql.Dataprovider.db._Query(sql)._ParamterSQL(new { SequenceId = SequenceNumInfo.SequenceIDIdentityID }).QueryMapperSingleOrDefaultAsync<SequenceNumInfo>();
            if (sequenceNum != null)
            {
                long nextVal = sequenceNum.CurrentVal + 1;
                if (nextVal > sequenceNum.EndNum)
                {
                    //result.CurrentVal = result.StartNum;
                    nextVal = sequenceNum.StartNum;
                }
                else
                {
                    switch (sequenceNum.ResetMode)
                    {
                        case SequenceResetMode.ByYear:
                            if (sequenceNum.ServerTime.Year != sequenceNum.LastUpdate.Year)
                            {
                                sequenceNum.CurrentVal = sequenceNum.StartNum;
                                nextVal = sequenceNum.CurrentVal + 1;
                            }
                            break;
                        case SequenceResetMode.ByMonth:
                            if (sequenceNum.ServerTime.Year != sequenceNum.LastUpdate.Year ||
                                sequenceNum.ServerTime.Month != sequenceNum.LastUpdate.Month)
                            {
                                sequenceNum.CurrentVal = sequenceNum.StartNum;
                                nextVal = sequenceNum.CurrentVal + 1;
                            }
                            break;
                        case SequenceResetMode.ByDay:
                            if (sequenceNum.ServerTime.Year != sequenceNum.LastUpdate.Year ||
                                sequenceNum.ServerTime.Month != sequenceNum.LastUpdate.Month ||
                                sequenceNum.ServerTime.Date != sequenceNum.LastUpdate.Date)
                            {
                                sequenceNum.CurrentVal = sequenceNum.StartNum;
                                nextVal = sequenceNum.CurrentVal + 1;
                            }
                            break;
                    }
                }
                string SQL = "update dbo.SequenceConfig  set CurrentVal = @CurrentVal, UpdateTime = getdate()  where SequenceId=@SequenceId";
                await Services.lib.Sql.Dataprovider.db._Query(SQL)._ParamterSQL(new { CurrentVal = nextVal, SequenceId = SequenceNumInfo.SequenceIDIdentityID }).QueryMapperSingleOrDefaultAsync<SequenceNumInfo>();

            }
            var data = new HttpObject.APIMapper<SequenceNumInfo>();
            data.code = sequenceNum != null ? HttpObject.Enums.Httpstatuscode_API.OK : HttpObject.Enums.Httpstatuscode_API.ERROR;
            data.Data = sequenceNum;
            data.Messenger = "";
            return data;
        }
        private async Task<int?> GetDonorIdByIdentityID(string identityID)
        {
            int? result = null;
            string sql = "select top 1 d.DonorID " +
                     " from tbl_Donor d " +
                     " where d.IdentityID = @IdentityID ";
            var data = await Services.lib.Sql.Dataprovider.db._Query(sql)._ParamterSQL(identityID).SingleOrDefaultAsync();
            if (data.code == HttpObject.Enums.Httpstatuscode_API.OK)
            {
                result = data.Data.DonorID;
            }
            return result;
        }
        private string GetAutoGeneratedIdentityID()
        {
            int? foundDonorId = null;
            string identityID = string.Empty;
            int loopTime = 0;
            do
            {
                DateTime currentDate = DateTime.Now;
                var sequenceNum = GetNextSequence();
                identityID = string.Format("{0:yyMM}{1:0000}", currentDate, sequenceNum.Result.Data.CurrentVal);
                foundDonorId = GetDonorIdByIdentityID(identityID).Result;
                loopTime++;
                if (loopTime > sequenceNum.Result.Data.EndNum - sequenceNum.Result.Data.StartNum)
                {
                    throw new Exception("Không cấp được SID, SID trong ngày đã đầy !!!");
                }
            } while (foundDonorId != null);

            return identityID;
        }
        public async Task<Services.lib.Sql.HttpObject.APIresult> SyncDonnorEx(Donnor.tbl_Donor donnor)
        {
            donnor.Sex = Common.ConvertSex(donnor.Sex);
            donnor.IdentityID = GetAutoGeneratedIdentityID();
            string rowguid = "declare @ID nvarchar(100); set @ID = (select NEWID());";

            string Insert_tbl_Donor_Examine_Attribute = string.Empty;
            string Update_tbl_Donor_Examine_Attribute = string.Empty;
            string[,] tbl_Donor_Examine_Attribute = new string[,]
            {
                 {"BLOODPRESSURE" ,donnor.BLOODPRESSURE },
                 {"HGB",donnor.HGB},
                 {"PULSE",donnor.PULSE },
                 {"STATUS", donnor.STATUS},
                 {"WEIGH",donnor.WEIGH}
            };
            for (int i = 0; i < tbl_Donor_Examine_Attribute.Length / tbl_Donor_Examine_Attribute.Rank; i++)
            {
                Insert_tbl_Donor_Examine_Attribute += "insert tbl_Donor_Examine_Attribute (DonorExID,ExamineAttributeId ,Value) values " +
                  $"(@DonorIDEx_Insert, N'{tbl_Donor_Examine_Attribute[i, 0]}', N'{tbl_Donor_Examine_Attribute[i, 1]}' );";
                Update_tbl_Donor_Examine_Attribute += $"update tbl_Donor_Examine_Attribute set Value = N'{tbl_Donor_Examine_Attribute[i, 1]}' where DonorExID=@DonorIDEx_Update and ExamineAttributeId = N'{tbl_Donor_Examine_Attribute[i, 0]}' ; ";
            }

            string ActionDonnor = @$"BEGIN

										--- Xử lý ở Donnor
                                       IF NOT EXISTS (SELECT * FROM tbl_Donor D  WHERE (D.IdentityID =@IdentityID or D.DonorCode = @DonorCode))
                                                       BEGIN
                                         Print('Insert Patient')
                                        insert into tbl_Donor (DateIn,DonorCode, sex,  Age ,Address,DonorName,DonorNameUnsign,Phone,BirthDay,IdentityID, TypeOf, rowguid , JobID, ContactAddress ) values(Getdate(),@DonorCode,@Sex,@Age,@Address,@DonorName,@DonorNameUnsign,@Phone,@BirthDay,@IdentityID,1,@ID,@JobID,@ContactAddress );
                                         END
                                       ELSE
                                        BEGIN
                                        Print('Update Patient')
                                        update tbl_Donor set DonorCode=@DonorCode, sex=@Sex,  Age=@Age ,Address=@Address,DonorName=@DonorName,DonorNameUnsign=@DonorNameUnsign,Phone=@Phone,BirthDay=@BirthDay, JobID=@JobID , ContactAddress=@ContactAddress where  (IdentityID=@IdentityID   or DonorCode=@DonorCode);   
                                      end


									  --- Xử lý ở Donnor_ex
									   IF NOT EXISTS (SELECT * FROM tbl_Donor D join tbl_Donor_Examine E on D.DonorID = E.DonorID  WHERE (D.IdentityID =@IdentityID or D.DonorCode = @DonorCode) and E.DonorExCode = @DonorExCode )
                                                       BEGIN
                                         Print('Insert Donnor_ex')
											declare @DonorID_Insert int; set @DonorID_Insert =  (select Top(1)  DonorID from tbl_Donor where DonorCode=@DonorCode);
											insert tbl_Donor_Examine (DonorExCode, DonorID,BloodSourceLocationId,BloodVolume,ElementID, DateIn) values (@DonorExCode, @DonorID_Insert ,@BloodSourceLocationId,@BloodVolume,@ElementID, GetDate());
											declare @DonorIDEx_Insert int; set @DonorIDEx_Insert =  (select Top(1)  DonorExID from tbl_Donor_Examine where DonorExCode=@DonorExCode);
										{Insert_tbl_Donor_Examine_Attribute}
										 END
                                       ELSE
                                        BEGIN
                                        Print('Update Donnor_ex')
										declare @DonorID_Update int; set @DonorID_Update =  (select Top(1)  DonorID from tbl_Donor where  (DonorCode=@DonorCode));
                                        update tbl_Donor_Examine set  DonorExCode=@DonorExCode,BloodSourceLocationId=@BloodSourceLocationId,BloodVolume=@BloodVolume,ElementID=@ElementID where DonorID=@DonorID_Update 
                                      	declare @DonorIDEx_Update int; set @DonorIDEx_Update =  (select Top(1)  DonorExID from tbl_Donor_Examine where DonorExCode=@DonorExCode);
										{Update_tbl_Donor_Examine_Attribute}
									  end



                                    END";

            return await Services.lib.Sql.Dataprovider.db._Querys(rowguid, ActionDonnor)._ParamterSQL<tbl_Donor>(donnor).ExcuteQueryAsync();
        }
        public async Task<HttpObject.APIMapper<dynamic>> CheckDonnorEx(string DonorExCode)
        {
            string SQL = "SELECT cast((case when   count(DonorExCode)  = 1 then 0 else 1 end )  as bit) as CheckDonnor FROM  tbl_Donor_Examine  WHERE (DonorExCode = @DonorExCode)";
            return await Services.lib.Sql.Dataprovider.db._Query(SQL)._ParamterSQL(new { DonorExCode = DonorExCode }).SingleOrDefaultAsync();
        }

        public async Task<HttpObjectData.APIresult> HistoryDonnorAsync(string IdentityID)
        {
            HttpObjectData.APIresult aPIresult = new HttpObjectData.APIresult();
            List<HistoryDonnor> historyDonnor = new List<HistoryDonnor>();

            string Donnor = @"SELECT tgd.KetLuan, de.DateIn, SID
                                FROM tbl_Donor d INNER JOIN
                                tbl_Donor_Examine de ON d.DonorID = de.DonorID LEFT OUTER JOIN
                                tbl_TestGroupDetail tgd ON de.DonorExCode = tgd.BloodID where d.IdentityID = @IdentityID order by datein desc";
            var DonnorEx = await Services.lib.Sql.Dataprovider.db._Query(Donnor)._ParamterSQL(new { IdentityID = IdentityID }).QueryMapperAsync<TestGroupDetail>();
            foreach (var item in DonnorEx)
            {
                HistoryDonnor historyDonnorVM = new HistoryDonnor();
                if (item != null)
                {
                    historyDonnorVM.DateIn = item?.DateIn;
                    historyDonnorVM.ABORH = item?.KetLuan;
                    if (!string.IsNullOrEmpty(item.SID))
                    {
                        string QueryResultBlood = @"SELECT  top (3)  LOWER(Result) as Result , TestCode
                                                    FROM  tbl_ResultBlood WHERE (SIDRoot = @SID) AND (NAT = 1) order by DateInsert desc ";

                        var TableSID = await Services.lib.Sql.Dataprovider.db._Query(QueryResultBlood)._ParamterSQL(new { SID = item.SID })
                            .QueryMapperAsync<ResultBlood>();

                        int PointBIC = -1;
                        foreach (var items in TableSID)
                        {
                            PointBIC += CheckBCI(items.Result);
                            historyDonnorVM.resultBloods.Add(items);
                        }
                        if (PointBIC < 0)
                            historyDonnorVM.BCI = "Chưa rõ kết quả";
                        if (PointBIC == 0)
                            historyDonnorVM.BCI = "Âm tính";
                        if (PointBIC > 0)
                            historyDonnorVM.BCI = "Nghi ngờ";

                    }
                    else
                    {
                        historyDonnorVM.BCI = "Chưa rõ kết quả";
                    }

                }
                historyDonnor.Add(historyDonnorVM);
            }

            aPIresult.Data = historyDonnor;
            return aPIresult;
        }

        private int CheckBCI(string Result)
        {
            switch (Result)
            {
                case "phản ứng":
                    return 1;
                case "không phản ứng":
                    return 0;
                default:
                    return -1;
            }
        }


    }
}
